"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var connection_1 = require("./connection");
var result_1 = require("./result");
var EQ = '$eq', GTE = '$gte', LTE = '$lte';
function loader(prop) {
    return function (key, value) {
        var instance = new this();
        instance.ClassReference = this;
        switch (prop) {
            case EQ:
                return instance.$eq(key, value);
                break;
            case GTE:
                return instance.$gte(key, value);
                break;
            case LTE:
                return instance.$lte(key, value);
            default:
                return instance.$gte(key, value);
        }
    };
}
/**
 * Represents a mongodb collection of documents i.e. namepsace
 * where unique identifiable documents records are collated
 */
var Collection = /** @class */ (function () {
    function Collection() {
        this.CollectionName = "";
        this.query = {};
        this.$client = null;
        this.$database = null;
        this.$collection = null;
        /**
         * If the payload exists then the functions will retrieve the correct values automatically
         * so remember to leverage this functionality without worrying about implementing complex lookup
         * patterns
         */
        this.engine = {
            mutated: false,
            payload: {},
            processed: false,
            required: [],
            metadata: {
                indexes: {},
                defaults: {}
            }
        };
        this.envelope = {};
    }
    Collection.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.gatherMetadata();
                        _a = this;
                        return [4 /*yield*/, connection_1.Connection.connect()];
                    case 1:
                        _a.$client = _b.sent();
                        this.$database = connection_1.Connection.database();
                        this.$collection = this.$database.collection(this.getCollectionName());
                        return [2 /*return*/];
                }
            });
        });
    };
    Collection.prototype.$elemMatch = function (key, value) {
        this.exists(key);
        return this;
    };
    Collection.prototype.getO = function (path, value) {
        return { name: 'yes' };
    };
    Collection.prototype.$eq = function (key, value) {
        var _a;
        var query = (_a = {}, _a[key] = { $eq: value }, _a);
        this.query = __assign(__assign({}, this.query), query);
        return this;
    };
    Collection.prototype.$gt = function (key, value) {
        return this;
    };
    Collection.prototype.$gte = function (key, value) {
        return this;
    };
    Collection.prototype.$lt = function (key, value) {
        return this;
    };
    Collection.prototype.$lte = function (key, value) {
        return this;
    };
    /**
     * Check that all fields marked as required are not empty otherwise raise an error. This
     * method should be called before save is issued.
     */
    Collection.prototype.checkRequired = function () {
        for (var _i = 0, _a = this.engine.required; _i < _a.length; _i++) {
            var indispensable = _a[_i];
            if (!this.engine.payload[indispensable])
                throw Error(indispensable + " is a required field");
        }
    };
    /**
     * Flush the data that has changed to the database
     */
    Collection.prototype.commit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                console.log("This was called from the parent method: ", this.getCollectionName());
                return [2 /*return*/];
            });
        });
    };
    Collection.prototype.delete = function (query, callback) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var payload, _c, error_1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 6, , 7]);
                        return [4 /*yield*/, this.init()];
                    case 1:
                        _d.sent();
                        if (!callback) return [3 /*break*/, 3];
                        return [4 /*yield*/, ((_a = this.$collection) === null || _a === void 0 ? void 0 : _a.deleteOne(query, callback))];
                    case 2:
                        _c = _d.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, ((_b = this.$collection) === null || _b === void 0 ? void 0 : _b.deleteOne(query))];
                    case 4:
                        _c = _d.sent();
                        _d.label = 5;
                    case 5:
                        payload = _c;
                        console.log(payload);
                        this.engine.mutated = false;
                        return [3 /*break*/, 7];
                    case 6:
                        error_1 = _d.sent();
                        console.log(error_1.message);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/, 0];
                }
            });
        });
    };
    Collection.deleteMany = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, 0];
            });
        });
    };
    Collection.deleteOne = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, 0];
            });
        });
    };
    /**
     * Checks if the key exists on this document and if does then all is well otherwise throws
     * an error
     */
    Collection.prototype.exists = function (key) {
        if (!this.envelope[key])
            return true;
        throw Error("Field **" + key + "** does not exist on collection " + this.getCollectionName());
    };
    /**
     *
     * @param query
     */
    Collection.prototype.existsDeep = function (key) {
        var keys = key.split('.');
        var envelope = __assign({}, this.envelope);
        while (keys.length && (envelope = envelope[keys.shift()]))
            ;
        return !!envelope;
    };
    /**
     * Find a document from this collection using a JS object as input for value lookup
     * and query matching
     *
     * @param query Javascript object representation to use for query parameters passed to mongodb
     *
     * @returns An iterable cursor instance of mongoengine.cursors.Cursor
     */
    Collection.prototype.find = function (query) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var results;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.init()];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, ((_a = this.$collection) === null || _a === void 0 ? void 0 : _a.find(this.query))];
                    case 2:
                        results = _b.sent();
                        return [2 /*return*/, new Promise(function (resolve) {
                                resolve(results ? new result_1.Results(results, _this.ClassReference) : null);
                            })];
                }
            });
        });
    };
    /**
     * Retrieve `n` amount of documents from the mongodb backend server - where n = limit
     *
     * @param limit (optional) The number of documents to fetch from the mongodb connection
     *
     * @returns An array containing instances of the mongoengine.cursors.Document class
     */
    Collection.prototype.fetch = function (limit) {
        return null;
    };
    /**
     * Ensure indexes and other required setup configuration for the collection
     * is loaded for flushing to the db
     *
     * This method is always called from init to ensure before db network action metadata is loaded
     */
    Collection.prototype.gatherMetadata = function () {
        if (this.engine.processed)
            return;
        var props = Object.entries(this);
        for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
            var _a = props_1[_i], name_1 = _a[0], func = _a[1];
            if (typeof func === "function" && func.name === "__mongofield__") {
                //accessor sets options in metadata of collection for further processing
                func.bind(this)();
            }
        }
        this.engine.processed = true;
    };
    /**
     * Return string representation of class name
     */
    Collection.prototype.getCollectionName = function () {
        if (this.CollectionName) {
            return this.CollectionName;
        }
        //create lambda to convert case from camel/pascal -> snake_case
        return (function (entry) {
            return entry.split('').map(function (char, index) {
                if (char === char.toUpperCase())
                    return (index !== 0 ? '_' : '') + char.toLowerCase();
                return char;
            }).join('');
        })(this.constructor.name);
    };
    Collection.prototype.json = function () {
        return this.engine.payload;
    };
    Collection.prototype.loadFromJson = function (data) {
        //convert this to a static class or use extractor magic method defined at top of file and call this method
        for (var key in data) {
            console.log(key);
        }
        return this;
    };
    /**
     * Logical separation of AND vs OR
     */
    Collection.OR = function () {
        return Collection;
    };
    Collection.prototype.persist = function () {
        return __awaiter(this, void 0, void 0, function () {
            var db;
            return __generator(this, function (_a) {
                db = global.db;
                console.log(db);
                return [2 /*return*/];
            });
        });
    };
    Collection.prototype.populatePayload = function (payload) {
        this.engine.payload = __assign({}, payload);
    };
    /**
     *
     * @param name Name of the field as passed in from closure into __mongofield__ function
     * @param options Options to use in the configuration of the field
     */
    Collection.prototype.processOptions = function (name, options) {
        var _this = this;
        var processIndex = function () {
            if (options.unique) {
                var indexes = _this.engine.metadata.indexes;
                indexes = __assign({ unique: options.unique, required: options.required }, indexes);
                _this.engine.metadata.indexes = indexes;
            }
        };
        var processDefault = function (name, def) {
            if (!def)
                return;
            _this.engine.metadata.defaults[name] = typeof def === "function" ? def() : def;
        };
        processDefault(name, options.default);
    };
    /**
     * Persist the record to the database by initialising the fields specified in the document, and
     * checking to ensure that no required fields are absent before flushing to network.
     */
    Collection.prototype.save = function () {
        return __awaiter(this, void 0, void 0, function () {
            var payload, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.init()];
                    case 1:
                        _a.sent();
                        this.checkRequired();
                        return [4 /*yield*/, this.$collection.insertOne(this.engine.payload)];
                    case 2:
                        payload = _a.sent();
                        console.log(payload);
                        this.engine.mutated = false;
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        console.log(error_2.message);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     * @param amount The amount of documents to skip before starting to fetch results
     */
    Collection.prototype.skip = function (amount) {
        //satisfy signature for now
        return this;
    };
    Collection.$eq = loader(EQ);
    Collection.$gte = loader(GTE);
    Collection.$lte = loader(LTE);
    Collection.find = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var instance;
            return __generator(this, function (_a) {
                instance = new this();
                instance.ClassReference = this;
                return [2 /*return*/, instance.find(query)];
            });
        });
    };
    Collection.delete = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var instance;
            return __generator(this, function (_a) {
                instance = new this();
                instance.ClassReference = this;
                return [2 /*return*/, instance.delete(query || {})];
            });
        });
    };
    return Collection;
}());
exports.Collection = Collection;
