"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var processor_1 = require("~/utils/processor");
var isValid = function (value, options) {
    var isMinimumLength = true;
    var isMaximumLength = true;
    if (!options)
        return true;
    if (options.minLength && options.minLength > value.length)
        isMinimumLength = false;
    if (options.maxLength && options.maxLength < value.length)
        isMaximumLength = false;
    return isMinimumLength && isMaximumLength;
};
/**
 *
 * @param name Name to use when persisting the field in the collection
 * @param options The options to customize this field with i.e. indexes, allowed options,
 *      lengths etc.
 *
 *      planned: It will later be possible to provide a string as name for an index
 *      and have the provided name matched to a function present on the collection to specify
 *      index options as opposed to creating index options inline with the field
 */
function Stringfield(name, options) {
    return function __mongofield__(value) {
        var _a, _b;
        if (value) {
            if (isValid(value, options))
                //@ts-ignore
                this.engine.payload[name] = value;
            else
                throw Error(name + " did not pass validation checks");
        }
        else {
            processor_1.processIndex(this, (_a = options) === null || _a === void 0 ? void 0 : _a.index);
            processor_1.processDefault(this, name, ((_b = options) === null || _b === void 0 ? void 0 : _b.default));
            return this.engine.payload[name];
        }
    };
}
exports.Stringfield = Stringfield;
