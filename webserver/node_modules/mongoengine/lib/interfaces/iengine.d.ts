declare type nullable = string | number | Array<any> | object | null | undefined;
export declare enum IndexTypes {
    Text = "text",
    Asc = 1,
    Desc = -1,
    Wildcard = "$**"
}
export interface Indexables {
    name?: string;
    fields: {};
    type?: IndexTypes;
    verbatim?: {};
}
export interface IMetadata {
    indexes: {};
    defaults: {
        [propName: string]: (() => any) | nullable;
    };
}
/**
 * @member mutated: If this is true then the collation/document has been edited since last fetch
 *      from the server
 * @member payload: This is the underlying store from where data is fetched. Never edit it manually
 * @member processed: Specifies if the metadata of the file has been loaded, deprecate for metadata truthy
 *      later
 */
export interface IEngine {
    mutated: boolean;
    required: Array<string>;
    payload: {
        [name: string]: nullable;
    };
    processed: boolean;
    metadata: IMetadata;
}
export {};
