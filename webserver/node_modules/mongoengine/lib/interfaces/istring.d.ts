/**
 * @member name: Name to give the index
 * @member verbatim: This is you saying `hey I know what I am doing` pass this verbatim to mongo
 *      and the fields you provide will be merged to the options map and passed as is to mongo
 *      i.e. verbatim: {textIndexVersion: 3}
 * @member fields: The fields you want to use as part of the indexing
 */
interface Indexable {
    name?: string;
    verbatim?: {};
    fields: {};
}
/**
 * @member minLength: The minimum length allowed to be used in this field
 * @member maxLength:  The maximum length allowed
 * @member required: Should we allow the collection to be saved if this field is absent?
 * @member unique: Create an index on the collection using this field as input for uniqueness
 * @member choices: Limit the choice of text that this fields accepts to the array elements provided
 * @member default: A function or default value to use in this field if none is provided
 *      if a function is used it must return a value assignable to this fields type
 * @member index: Define an index with finer granularity of control over the index options
 */
export interface IString {
    minLength?: number;
    maxLength?: number;
    required?: boolean;
    unique?: boolean | {
        [field: string]: number;
    };
    choices?: Array<string>;
    default?: (() => string | number) | string;
    index?: Indexable;
}
export {};
