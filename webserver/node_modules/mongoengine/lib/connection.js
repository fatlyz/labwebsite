"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var mongodb_1 = require("mongodb");
var IP_FAMILY;
(function (IP_FAMILY) {
    IP_FAMILY[IP_FAMILY["ipv4_ipv6"] = 0] = "ipv4_ipv6";
    IP_FAMILY[IP_FAMILY["ipv4"] = 4] = "ipv4";
    IP_FAMILY[IP_FAMILY["ipv6"] = 6] = "ipv6";
})(IP_FAMILY || (IP_FAMILY = {}));
var CONNECT_TIMEOUT = process.env.MONGO_CONNECT_TIMEOUT || 30000;
var DATABASE = process.env.MONGO_DATABASE || 'test';
var FAMILY = process.env.MONGO_FAMILY || IP_FAMILY.ipv4_ipv6;
var HOST = process.env.MONGO_HOST || 'localhost';
var KEEP_ALIVE = process.env.MONGO_KEEP_ALIVE || true;
var KEEP_ALIVE_INITIAL_DELAY = process.env.MONGO_KEEP_ALIVE_INITIAL_DELAY || 30000;
var MIN_SIZE = process.env.MONGO_MIN_SIZE || 0;
var NO_DELAY = process.env.MONGO_NO_DELAY || true;
var PASSWORD = process.env.MONGO_PASSWORD;
var PORT = process.env.MONGO_PORT || 27017;
var POOLING = process.env.MONGO_POOL_SIZE || 5;
var SOCKET_TIMEOUT = process.env.MONGO_SOCKET_TIMEOUT || 36000;
var TLS = process.env.MONGO_TLS || false;
var URL = process.env.MONGO_URL;
var USE_UNIFIED_TOPOLOGY = process.env.MONGO_USE_UNIFIED_TOPOLOGY || true;
var USER = process.env.MONGO_USER;
var VALIDATE_OPTIONS = process.env.MONGO_VALIDATE_OPTIONS || false;
var W = process.env.MONGO_W || null;
var uriString = URL || "mongodb://" + HOST + ":" + PORT;
var getDefaultOptions = function () { return ({
    keepAlive: KEEP_ALIVE,
    useUnifiedTopology: USE_UNIFIED_TOPOLOGY,
}); };
var Connection = /** @class */ (function () {
    function Connection() {
    }
    Connection.connect = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.client)
                            return [2 /*return*/, this.client];
                        _a = this;
                        return [4 /*yield*/, mongodb_1.MongoClient.connect(uriString, __assign(__assign({}, getDefaultOptions()), options))];
                    case 1:
                        _a.client = _b.sent();
                        this.db = this.client.db(DATABASE);
                        return [2 /*return*/, this.client];
                }
            });
        });
    };
    Connection.database = function () {
        if (!this.client)
            throw Error('You need to connect to the mongo server first!!!');
        return this.db;
    };
    return Connection;
}());
exports.Connection = Connection;
